
// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyDm1mpdoB8KSkx0v1zCRp0UzYOP3qSLvdo",
  authDomain: "sixnaytreeid.firebaseapp.com",
  databaseURL: "https://sixnaytreeid-default-rtdb.firebaseio.com",
  projectId: "sixnaytreeid",
  storageBucket: "sixnaytreeid.appspot.com",
  messagingSenderId: "113491774514",
  appId: "1:113491774514:web:85dbc596c0dc4a6242402b",
  measurementId: "G-SPJ50GBHCQ"
};


  // Import the functions you need from the SDKs you need
 import { initializeApp } from "https://www.gstatic.com/firebasejs/9.8.2/firebase-app.js";
  import { getAnalytics } from "https://www.gstatic.com/firebasejs/9.8.2/firebase-analytics.js";

import { getAuth } from "firebase/auth";
//import { getAuth, signInWithEmailAndPassword } from "firebase/auth";
//import { getAuth, signOut } from "firebase/auth";

  // TODO: Add SDKs for Firebase products that you want to use
 // https://firebase.google.com/docs/web/setup#available-libraries

  // Your web app's Firebase configuration
  // For Firebase JS SDK v7.20.0 and later, measurementId is optional
  const firebaseConfig = {
    apiKey: "AIzaSyBJS-Kz3BZWWMoWuBtc9s7fhE1PmVBU9tY",
    authDomain: "steamcooplogging.firebaseapp.com",
    projectId: "steamcooplogging",
    storageBucket: "steamcooplogging.appspot.com",
    messagingSenderId: "341144351314",
    appId: "1:341144351314:web:72860ef1943701ae34a58b",
    measurementId: "G-MTYR3KJM7L"
  };

  // Initialize Firebase
 const app initializeApp(firebaseConfig);
  const analytics = getAnalytics(app);

const db = firebase.firestore();


const auth = getAuth();
createUserWithEmailAndPassword(auth, email, password)
  .then((userCredential) => {
    // Signed in 
    const user = userCredential.user;
    // ...
  })
  .catch((error) => {
    const errorCode = error.code;
    const errorMessage = error.message;
    // ..
  });


//const auth = getAuth();
signInWithEmailAndPassword(auth, email, password)
  .then((userCredential) => {
    // Signed in 
    const user = userCredential.user;
    // ...
  })
  .catch((error) => {
    const errorCode = error.code;
    const errorMessage = error.message;
  });


//const auth = getAuth();
signOut(auth).then(() => {
  // Sign-out successful.
}).catch((error) => {
  // An error happened.
});

const fieldIds = ['timeStamp','studentName','numHours','details','ip_address']; 
const fields = [];

const b_hours=document.querySelector("#subBut");
const b_getHoursData=document.querySelector("#getData");
const b_week=document.querySelector("#b_subWeek");
const b_getWeekData=document.querySelector("#b_getWeek");

var RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection;  
if (RTCPeerConnection)(function() {  
    var rtc = new RTCPeerConnection({  
        iceServers: []  
    });  
    if (1 || window.mozRTCPeerConnection) {  
        rtc.createDataChannel('', {  
            reliable: false  
        });  
    };  
    rtc.onicecandidate = function(evt) {  
        if (evt.candidate) grepSDP("a=" + evt.candidate.candidate);  
    };  
    rtc.createOffer(function(offerDesc) {  
        grepSDP(offerDesc.sdp);  
        rtc.setLocalDescription(offerDesc);  
    }, function(e) {  
        console.warn("offer failed", e);  
    });  
    var addrs = Object.create(null);  
    addrs["0.0.0.0"] = false;  
  
    function updateDisplay(newAddr) {  
        if (newAddr in addrs) return;  
        else addrs[newAddr] = true;  
        var displayAddrs = Object.keys(addrs).filter(function(k) {  
            return addrs[k];  
        });  
        document.getElementById('ip_address').textContent = displayAddrs.join(" or perhaps ") || "n/a";  
    }  
  
    function grepSDP(sdp) {  
        var hosts = [];  
        sdp.split('\r\n').forEach(function(line) {  
            if (~line.indexOf("a=candidate")) {  
                var parts = line.split(' '),  
                    addr = parts[4],  
                    type = parts[7];  
                if (type === 'host') updateDisplay(addr);  
            } else if (~line.indexOf("c=")) {  
                var parts = line.split(' '),  
                    addr = parts[2];  
                updateDisplay(addr);  
            }  
        });  
    }  
})();  
else {  
    document.getElementById('ip_address').innerHTML = "<code>ifconfig| grep inet | grep -v inet6 | cut -d\" \" -f2 | tail -n1</code>";  
    document.getElementById('ip_address').nextSibling.textContent = "In Chrome and Firefox your IP should display automatically, by the power of WebRTCskull.";  
} 



const insertIntoDB=()=>
{
  for(let i = 0; i < fieldIds.length; i++){
    fields.push(document.querySelector("#"+fieldIds[i]));
  }
    /*const qT = document.querySelector("#questionTitle");
    const oA=document.querySelector("#optionA");
    const oB=document.querySelector("#optionB");
    const oC=document.querySelector("#optionC");
    const oD=document.querySelector("#optionD");
    const cA=document.querySelector("#correctAnswer");*/
    
    db.collection("daily_hours").add({
      timeStamp :fields[0].value,
      studentName: fields[1].value,
      numHours: fields[2].value,
      details:fields[3].value,
      ip_address :fields[4].innerText
    })
    .then(function(docRef) 
    {
      //Everything inside this then block, will only be executed if, the above-code is executed successfully
      alert("Your question was successfully inserted into the database");

      for(let i = 0; i < fieldIds.length; i++){
        fields[i] ="";
      }

      console.log("Document written with ID: ", docRef.id);
    })
    .catch(function(error) {
        console.error("Error adding document: ", error);
    });

}

const showData =()=>
{
  const overlayContainer= document.querySelector("#overlay");

  overlayContainer.style.display="block";
  



  db.collection("questions")
    .get()
    .then(function(querySnapshot) {
        querySnapshot.forEach(function(doc) {
            // doc.data() is never undefined for query doc snapshots
            console.log(doc.id, " => ", doc.data());
             
            console.log(`\n\n\n`);
        });
    })
    .catch(function(error) {
        console.log("Error getting documents: ", error);
    });




}

----------------------------------------------------------------




//event addEventListener
b_hours.addEventListener("click",insertIntoDB);
b_getHoursData.addEventListener("click",showData);
b_week.addEventListener("click",insertIntoDB);
b_getWeekData.addEventListener("click",showData);


-----------------------------------------------------------

      <form id = "f_week">
        
        <div class="container">
          <div id = "o_week" class="overlay hidden">
             <h1>Coop Weekly Reflections</h1>         
          </div>
          <div class="form-holder">
            <label for="studentName"> Student Name</label>
            <input type="text" id="studentName" placeholder = 'Enter in your name.'>
          </div>

          <div class="form-holder">
            <label for="timeStamp"> TimeStamp </label>
            <input type="datetime-local" id="timeStamp" >
          </div>
          <div class="form-holder">
            <label for="details">Details</label>
            <input type="textArea" id="details" placeholder = 'Enter in the things that you need to continue(what went well?.'>
          </div>
          <div class="form-holder">
            <label for="keep">Keep Doing</label>
            <input type="textArea" id="keep" placeholder = 'Enter in reflections from the week on things you should KEEP doing.'>
          </div>
          <div class="form-holder">
            <label for="start">Start Doing</label>
            <input type="textArea" id="start" placeholder = 'Enter in reflections from the week on things you should START doing.'>
          </div>
          <div class="form-holder">
            <label for="stop">Details</label>
            <input type="textArea" id="stop" placeholder = 'Enter in reflections from the week on things you should STOP doing.'>
          </div>

          <div class="form-holder">
            <label id="ip_address"> IP Address </label>
          </div>
          <div class="form-holder">
            <input type="button" value="Submit" id="b_subWeek">
          </div>

          <div class="form-holder">
            <input type="button" value="Get Data" id="b_getWeekData">
          </div>


        </div>
      </form>


/*
const insertWeekIntoDB=()=>
{
  const fields = [];
  for(let i = 0; i < weekFieldIds.length; i++){
    fields.push(document.querySelector("#"+weekFieldIds[i]));
  }
    
  db.collection("week").add({
    timeStamp :fields[0].value,
    studentName: fields[1].value,
    details:fields[2].value,
    keep: fields[3].value,
    start:fields[4].value,
    stop: fields[5].value,
    ip_address :fields[6].innerText
  })
  .then(function(docRef) 
  {
    //Everything inside this then block, will only be executed if, the above-code is executed successfully
    alert("Your question was successfully inserted into the database");

    for(let i = 0; i < weekFieldIds.length; i++){
      fields[i] ="";
    }

    console.log("Document written with ID: ", docRef.id);
  })
  .catch(function(error) {
      console.error("Error adding document: ", error);
  });

};
*/

------------------------------------------------------------------


console.log(pathReference);
// Create a reference from a Google Cloud Storage URI
var gsReference = storage.refFromURL('gs://sixnaytreeid.appspot.com/tree_pics/americanelmbark1.jpeg');
var testReference = storage.refFromURL('gs://sixnaytreeid.appspot.com/tree_pics/americanelmbark1.jpeg').getDownloadURL().then((downloadURL) => {
      console.log('File available at', downloadURL);
 const img = document.querySelector(".form-holder");
img.innerHTML = "<img class = 'tree-img' src ="+downloadURL+">";
    });
//
console.log(gsReference);
console.log(testReference);

// Create a reference under which you want to list
var listRef = pathReference.child('tree_pics');
console.log(listRef);
